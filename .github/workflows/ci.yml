name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27018:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongosh"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 60s

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python for backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install backend dependencies
        run: |
          cd backend
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      
      # Run backend tests
      - name: Run backend tests
        run: |
          cd backend
          . venv/bin/activate
          pytest

      # Set up Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      # Create .env file
      - name: Create .env file
        run: |
          cat <<EOF > backend/.env
          MONGO_URI=${{ secrets.MONGO_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          ADMIN_NAME=${{ secrets.ADMIN_NAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          EOF

      # Set up Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker Images
        run: docker-compose build

      # Run containers
      - name: Run Docker Containers
        run: |
          docker-compose up -d
          docker ps -a

      # Debugging container health
      - name: Debug MongoDB health
        run: |
          echo "Checking MongoDB container health..."
          docker inspect --format='{{json .State.Health}}' $(docker ps -q --filter ancestor=mongo:6.0) || echo "Health check failed"

      # Health Check
      - name: Check App Health
        run: |
          echo "Waiting for backend to be ready..."
          for i in {1..10}; do
            if curl -f http://localhost:8000; then
              exit 0
            fi
            sleep 10
          done
          echo "Backend failed to start"
          exit 1
